//process manager

alias fun_num R1;


// get free pcb entry
if(fun_num == 1) then
   
   alias i R0;
   i = 0;

   while(i < 16) do
        
        if([PROCESS_TABLE + i*16 + 4] == TERMINATED) then
              
             [PROCESS_TABLE + i*16 + 1] = i;
             [PROCESS_TABLE + i*16 + 4] = ALLOCATED;
             [PROCESS_TABLE + i*16 + 14] = PAGE_TABLE_BASE + i*20;
             [PROCESS_TABLE + i*16 + 15] = 10;
             return;

        endif;

        i = i+1;
    
    endwhile;

    i = -1;
    return;


endif;
             
//free user page
if(fun_num == 2)  then

    alias user_page R3;

    user_page = [PROCESS_TABLE + R2*16 + 11];

    multipush(R1,R2,R3);

    R1 = 2;
    R2 = user_page;

    call MOD_2;

    multipop(R1,R2,R3);

    return;

endif;


//exit process
if(fun_num == 3)  then 

    alias PID R2;

    //free user page
    multipush(R1,R2);

    R1 = 2;

    call MOD_1;

    multipop(R1,R2);


    //free page_table
    multipush(R1,R2);

    R1 = 4;

    call MOD_1;

    multipop(R1,R2);

    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 4] = TERMINATED;

    return;

endif;


//free pagetable
if(fun_num == 4)  then 

    alias PID R2;

    [PAGE_TABLE_BASE + PID*20 + 0] = -1;
    [PAGE_TABLE_BASE + PID*20 + 1] = "0000";
    [PAGE_TABLE_BASE + PID*20 + 2] = -1;
    [PAGE_TABLE_BASE + PID*20 + 3] = "0000";

    alias i R3;
    i=4;

    while(i<20)  do

        if([PAGE_TABLE_BASE + PID*20 + i]!= -1)  then

            multipush(R1,R2,R3);

            R1 = 2;
            R2 = [PAGE_TABLE_BASE + PID*20 + i];
            call MOD_2;

            multipop(R1,R2,R3);

            [PAGE_TABLE_BASE + PID*20 + i] = -1;
            [PAGE_TABLE_BASE + PID*20 + i+1] ="0000";

        endif;

    i = i+2;

    endwhile;
    
    alias block_num R4;
    R4 = [DISK_MAP_TABLE + PID*10 + 2];
    if(block_num != -1) then
        
        [DISK_MAP_TABLE + PID*10 + 2] = -1;
        multipush(R1,R2,R3);
        R1 = 4;
        R3 = R2;
        R2 = R4;
        call MOD_2;
        multipop(R1,R2,R3);

    endif;

    R4 = [DISK_MAP_TABLE + PID*10 + 3];
    if(block_num != -1) then
        
        [DISK_MAP_TABLE + PID*10 + 3] = -1;
        multipush(R1,R2,R3);
        R1 = 4;
        R3 = R2;
        R2 = R4;
        call MOD_2;
        multipop(R1,R2,R3);

    endif;

    R4 = [DISK_MAP_TABLE + PID*10 + 8];
    if(block_num != -1) then
        
        [DISK_MAP_TABLE + PID*10 + 8] = -1;
        multipush(R1,R2,R3);
        R1 = 4;
        R3 = R2;
        R2 = R4;
        call MOD_2;
        multipop(R1,R2,R3);

    endif;

    R4 = [DISK_MAP_TABLE + PID*10 + 9];
    if(block_num != -1) then
        
        [DISK_MAP_TABLE + PID*10 + 9] = -1;
        multipush(R1,R2,R3);
        R1 = 4;
        R3 = R2;
        R2 = R4;
        call MOD_2;
        multipop(R1,R2,R3);

    endif;

    return;

endif;






